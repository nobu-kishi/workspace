<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Mapperとxmlのマッピング -->
<mapper namespace="com.example.repository.DepartmentMapper">
	<!-- マッピング定義(部門) -->
	<resultMap type="com.example.domain.user.model.Department"
		id="departmentCount">
		<id column="department_id" property="departmentId" />
		<result column="department_name" property="departmentName" />
		<result column="profit_count" property="profitCount" />
		<result column="customer_count" property="customerCount" />
		<result column="profit_avg" property="profitAvg" />
	</resultMap>

	<!-- マッピング定義(営業成績) -->
	<!-- <resultMap type="com.example.domain.user.model.Sales" id="sales"> <id
		column="employee_id" property="employeeId" /> <result column="area" property="area"
		/> <result column="profit" property="profit" /> <result column="customer"
		property="customer" /> <result column="update_time" property="updateTime"
		/> <collection property="employeesList" resultMap="employees" /> </resultMap> -->


	<!-- マッピング定義(営業成績一覧) -->
	<resultMap
		type="com.example.domain.user.model.DepartmentSector"
		id="DepartmentSector">
		<id column="department_id" property="departmentId" />
		<result column="department_name" property="departmentName" />
		<result column="employee_not_exsits"
			property="employeeNotExsits" />
		<result column="profit" property="profit" />
		<result column="customer" property="customer" />
		<result column="update_time" property="updateTime" />
	</resultMap>

	<!-- ■追加課題A -->
	<!-- 部門一覧取得（集計） -->
	<select id="departmentCount" resultType="departmentCount">
		SELECT
		d.department_id
		,d.department_name
		, SUM(s.profit) AS profit_count
		, SUM(s.customer) AS
		customer_count
		, FLOOR(AVG(s.profit)) AS profit_avg
		FROM
		departments d
		JOIN
		employees e ON e.department_id = d.department_id
		JOIN
		sales s ON
		e.employee_id = s.employee_id
		WHERE
		e.employee_not_exsits= 0
		GROUP BY
		d.department_id
		,e.employee_not_exsits = 0
	</select>

	<!-- 営業成績取得（部署別） -->
	<select id="departmentsSales" resultType="DepartmentSector">
		SELECT
		e.employee_id
		,e.employee_name
		,e.employee_not_exsits
		,s.area
		,s.profit
		,s.customer
		,s.update_time

		FROM employees e
		JOIN sales s
		ON
		e.employee_id =
		s.employee_id
		JOIN
		departments d
		ON
		e.department_id =
		d.department_id

		<!-- WHERE
		FIXME:全社員取得と部署別取得のSQLを統合したい
		<if test="departmentId != null">
			d.department_id = #{departmentId}
		</if> -->
	</select>

	<!-- 営業成績取得（全社員） -->
	<select id="allSales" resultType="DepartmentSector">
		SELECT
		e.employee_id
		,e.employee_name
		,e.employee_not_exsits
		,s.area
		,s.profit
		,s.customer
		,s.update_time

		FROM employees e
		JOIN sales s
		ON
		e.employee_id
		=
		s.employee_id
		<!-- JOIN
		departments d
		ON e.department_id =
		d.department_id -->
	</select>

	<!-- 営業成績取得（個人） -->
	<select id="personalSales" resultMap="DepartmentSector">
		SELECT
		e.employee_id
		,e.employee_name
		,s.area
		,s.profit
		,s.customer
		,s.update_time
		FROM
		employees e
		JOIN sales s
		ON e.employee_id =
		s.employee_id
		JOIN
		departments
		d
		ON e.department_id = d.department_id
		WHERE e.employee_id
		=
		#{employeeId}
	</select>

	<!-- 営業成績更新（1件） -->
	<update id="updateSales">
		UPDATE sales
		SET
		area = #{area}
		,profit = #{profit}
		,customer = #{customer}
		,update_time = #{updateTime}
		WHERE
		employee_id =
		#{employeeId}
	</update>

	<!-- 営業成績更新（全件） -->
	<!-- <update id="updateSales"> UPDATE sales SET area = #{area} ,profit =
		#{profit} ,customer = #{customer} ,update_time = #{updateTime} WHERE employee_id
		= #{employeeId} </update> -->

	<!-- 営業成績取得（一時保存のみ） -->
	<!-- FIXME:既存の処理で分岐したい -->
	<!-- <select id="getTempSales" resultMap="DepartmentBulk"> -->
	<!-- <select id="getTempSales" resultMap="DepartmentSector">
		SELECT
		e.employee_id
		,e.employee_name
		,e.employee_not_exsits
		,e.department_id
		,s.area
		,s.profit
		,s.customer
		,s.update_time
		,d.department_id
		,d.department_name
		FROM employees e
		JOIN sales s
		ON e.employee_id =
		s.employee_id
		JOIN
		departments d
		ON e.department_id = d.department_id
	</select> -->

	<!-- 名前登録（一括） -->
	<insert id="employeesBulk" parameterType="java.util.List">
		insert into employees(
		employee_name
		,department_id)
		VALUES
		<foreach collection="dSectorList" item="dSectorList"
			separator=",">
			(#{dSectorList.employeeName}
			,#{dSectorList.departmentId})
		</foreach>
	</insert>

	<!-- 営業成績登録（一括) -->
	<insert id="depeartmentsBulk" parameterType="java.util.List">
		INSERT INTO sales(
		area
		,profit
		,customer)
		VALUES
		<foreach collection="dSectorList" item="dSectorList"
			separator=",">
			(#{dSectorList.area},
			#{dSectorList.profit},
			#{dSectorList.customer})
		</foreach>
	</insert>

	<!-- <insert> REPLACE sales </insert> -->
</mapper>