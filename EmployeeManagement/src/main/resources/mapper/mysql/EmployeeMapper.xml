<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Mapperとxmlのマッピング -->
<mapper namespace="com.example.repository.EmployeeMapper">
	<!-- マッピング定義(ユーザー) -->
	<resultMap type="com.example.domain.user.model.Employees"
		id="employees">
		<id column="employee_id" property="employeeId" />
		<result column="employee_password" property="employeePassword" />
		<result column="employee_name" property="employeeName" />
		<result column="employee_phone;" property="employeePhone;" />
		<result column="employee_email" property="employeeEmail" />
		<result column="employee_join_date" property="employeeJoinDate" />
		<result column="employee_not_exsits"
			property="employeeNotExsits" />
		<result column="department_id" property="departmentId" />
		<collection property="departmentList"
			resultMap="department" />
		<!-- ofType="com.example.domain.user.model.Department" columnPrefix="department_"
			/> -->
		<!-- <collection property="salesList" resultMap="sales" /> -->
		<!-- ofType="com.example.domain.user.model.Sales" /> --><!-- columnPrefix="sales_" /> -->
	</resultMap>

	<!-- マッピング定義(部門) -->
	<resultMap type="com.example.domain.user.model.Department"
		id="department">
		<id column="department_id" property="departmentId" />
		<result column="department_name" property="departmentName" />
		<!-- <result column="profit_count" property="profitCount" /> <result column="customer_count"
			property="customerCount" /> <result column="profit_avg" property="profitAvg"
			/> -->
	</resultMap>

	<!-- マッピング定義(営業成績) -->
	<!-- <resultMap type="com.example.domain.user.model.Sales" id="sales"> <id
		column="employee_id" property="employeeId" /> <result column="area" property="area"
		/> <result column="profit" property="profit" /> <result column="customer"
		property="customer" /> <result column="update_time" property="updateTime"
		/> </resultMap> -->

	<!-- ユーザー1件登録 -->
	<insert id="insertOne">
		insert into employees(
		<!-- employee_id -->
		employee_password
		,employee_name
		,employee_phone
		,employee_email
		,employee_join_date
		)
		values (
		<!-- #{employeeId} -->
		#{employeePassword}
		,#{employeeName}
		,#{employeePhone}
		,#{employeeEmail}
		,#{employeeJoinDate}
		);
	</insert>

	<!-- ユーザー複数件取得 -->
	<select id="findMany" resultType="employees">
		select *
		from employees
		<!-- 社員別一覧画面検証用 JOIN sales ON employees.employee_id = sales.employee_id; -->
		<where>
			<if test="employeeId != null">
				employee_id like CONCAT('%', #{employeeId}, '%')
			</if>
			<if test="employeeName != null">
				and employee_name like CONCAT('%', #{employeeName}, '%')
			</if>
			<if test="employeeEmail != null">
				and employee_email like CONCAT('%', #{employeeEmail},'%')
			</if>
			<!-- <if test="employeeJoinDate != null"> employee_join_date like CONCAT('%',
				#{employeeJoinDate}, '%') </if> -->
		</where>
	</select>

	<!-- ユーザー1件検索 -->
	<select id="findOne" resultMap="employees">
		select *
		from employees
		where
		employee_id = #{employeeId}
	</select>

	<!-- ユーザー1件更新 -->
	<update id="updateOne">
		update employees
		set
		employee_password =
		#{employeePassword}
		,employee_name = #{employeeName}
		,employee_phone =
		#{employeePhone}
		,employee_email = #{employeeEmail}
		where
		employee_id
		=#{employeeId}
	</update>

	<!-- ユーザー1件削除 -->
	<delete id="deleteOne">
		delete from employees
		where employee_id =
		#{employeeId}
	</delete>

	<!-- １名退職 -->
	<update id="retireOne">
		UPDATE employees
		SET
		employee_not_exsits = 1
		WHERE
		employee_id = #{employeeId};
	</update>
</mapper>